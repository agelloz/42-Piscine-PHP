
<- Vector ----------------------------------------------------------------------
The Vector class allows us to represent directions of the points we want to 
place with our Vertex (see previous ex)

A Vector is represented by the following characteristics:
- 'x' magnitude
- 'y' magnitude
- 'z' magnitude
- 'w' coordinate

An instance of Vector can be constructed from an array of two 2 Vertex as per 
this example:
$vtcXunit = new Vector( array( 'orig' => $vtxO, 'dest' => $vtxX ) );

- The 'dest' Vertex is mandatory and represents the destination of the Vector
- The 'orig' Vertex is optional and represents the origin of the Vector

If not set, the 'orig' Vertex will default to a fresh instance with x=0, y=0, 
z=0, w=1

The class provides a wide range of functions including:
- Get corresponding x, y, z, w values using getX(), getY(), getZ(), getW()
- Magnitude() function that returns (float) the length or 'norm' of a vector
- Normalize() function that returns (Vector) the normalized vector, if already 
normalized, it returns a fresh copy of the vector (takes no argument)
- Add(Vector $rhs) function that returns (Vector) the sum of two Vectors 
(takes a Vector $rhs as argument)
- Sub(Vector $rhs) function that returns (Vector) the substraction of two Vectors 
(takes a Vector $rhs as argument)
- Opposite() function that returns (Vector) the opposite of the Vector 
(takes no argument)
- ScalarProduct(Vector $k) function that returns (Vector) the product of a Vector 
with a scalar (takes a Vector $k as argument)
- DotProduct(Vector $rhs) function that returns (float) the scalar product of 
two Vectors (takes a Vector $rhs as argument)
- Cos(Vector $rhs) function that returns (float) the cosinus of two Vectors 
angle (takes a Vector $rhs as argument)
- CrossProduct(Vector $rhs) function that returns (Vector) the cross product 
of two Vectors using right hand rule (takes a Vector $rhs as argument)
---------------------------------------------------------------------- Vector ->